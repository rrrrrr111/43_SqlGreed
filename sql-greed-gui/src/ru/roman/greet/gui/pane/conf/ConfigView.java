package ru.roman.greet.gui.pane.conf;

import ru.roman.greet.gui.pane.PaineHolder;
import ru.roman.greet.service.config.dto.ConnConfigModel;
import ru.roman.greet.service.datasource.dto.ReconnectionInfo;
import ru.roman.greet.util.GuiUtils;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.List;

public class ConfigView extends JFrame {

    private ConfigManager configManager = ConfigManager.getInstance();
    private ConfigTableModel configTableModel = new ConfigTableModel();


    public ConfigView() {

        configManager.loadConnections();
        initComponents();
        renewCurrentConnectionLabel();
        jTable1.getColumnModel().getColumn(3).setPreferredWidth(5);
        jTable1.getColumnModel().getColumn(4).setPreferredWidth(5);
        jTable1.getColumnModel().getColumn(4).setCellEditor(new DefaultCellEditor(new JPasswordField()));
        jTable1.addMouseListener(new TableListener());
        configTableModel.fireTableDataChanged();
    }

    private class TableListener implements MouseListener {

        public void actionPerformed(ActionEvent e) {
        }

        public void mouseClicked(MouseEvent e) {
            configManager.getConnectionsModel().setDefaultConnectionNum(jTable1.getSelectedRow());
            renewCurrentConnectionLabel();
        }

        public void mousePressed(MouseEvent e) {
        }

        public void mouseReleased(MouseEvent e) {
        }

        public void mouseEntered(MouseEvent e) {
        }

        public void mouseExited(MouseEvent e) {
        }
    }

    private void renewCurrentConnectionLabel() {
        final ReconnectionInfo defaultConnection = getDefaultConnection();
        if (defaultConnection == null) {
            jLabel2.setText("Current selection : undefined");
        } else {
            jLabel2.setText("Current selection : " + defaultConnection.getAlias());
        }
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        GridBagConstraints gridBagConstraints;

        jLabel1 = new JLabel();
        jScrollPane1 = new JScrollPane();
        jTable1 = new JTable();
        jButton1 = new JButton();
        jButton2 = new JButton();
        jButton3 = new JButton();
        jButton4 = new JButton();
        jLabel2 = new JLabel();
        jButton5 = new JButton();
        jButton6 = new JButton();

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(configManager.getConnConfigFilename());
        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        setLocationByPlatform(true);
        getContentPane().setLayout(new GridBagLayout());

        jLabel1.setText("Set connection configuration");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.insets = new Insets(3, 0, 0, 0);
        getContentPane().add(jLabel1, gridBagConstraints);

        jScrollPane1.setPreferredSize(new Dimension(780, 200));

        jTable1.setModel(configTableModel);
        jTable1.setSelectionBackground(new Color(123, 243, 255));
        jTable1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jTable1);

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new Insets(3, 3, 3, 3);
        getContentPane().add(jScrollPane1, gridBagConstraints);

        jButton1.setText("New/Copy");
        jButton1.setPreferredSize(new Dimension(110, 20));
        jButton1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new Insets(0, 3, 3, 3);
        getContentPane().add(jButton1, gridBagConstraints);

        jButton2.setText("Delete");
        jButton2.setMaximumSize(null);
        jButton2.setMinimumSize(null);
        jButton2.setPreferredSize(new Dimension(110, 20));
        jButton2.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new Insets(0, 0, 3, 6);
        getContentPane().add(jButton2, gridBagConstraints);

        jButton3.setText("Save config");
        jButton3.setMaximumSize(null);
        jButton3.setMinimumSize(null);
        jButton3.setPreferredSize(new Dimension(110, 20));
        jButton3.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new Insets(0, 6, 3, 0);
        getContentPane().add(jButton3, gridBagConstraints);

        jButton4.setText("Reload config");
        jButton4.setMaximumSize(null);
        jButton4.setMinimumSize(null);
        jButton4.setPreferredSize(new Dimension(110, 20));
        jButton4.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new Insets(0, 3, 3, 3);
        getContentPane().add(jButton4, gridBagConstraints);

        jLabel2.setForeground(UIManager.getDefaults().getColor("ToolBar.dockingForeground"));
        jLabel2.setText("Current selection: ");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new Insets(0, 5, 3, 210);
        getContentPane().add(jLabel2, gridBagConstraints);

        jButton5.setText("Cancel");
        jButton5.setToolTipText("exit");
        jButton5.setHorizontalTextPosition(SwingConstants.CENTER);
        jButton5.setPreferredSize(new Dimension(150, 20));
        jButton5.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new Insets(0, 0, 3, 5);
        getContentPane().add(jButton5, gridBagConstraints);

        jButton6.setText("OK");
        jButton6.setToolTipText("save and exit");
        jButton6.setMaximumSize(null);
        jButton6.setMinimumSize(null);
        jButton6.setName("JButton6"); // NOI18N
        jButton6.setPreferredSize(new Dimension(150, 20));
        jButton6.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new Insets(0, -300, 3, 158);
        getContentPane().add(jButton6, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (jTable1.getSelectedRow() < 0) {
            getConnectionsInfo().add(new ReconnectionInfo());
        } else {
            int row = jTable1.getSelectedRow();
            getConnectionsInfo().add(getDefaultConnection().clone());
        }
        configTableModel.fireTableDataChanged();

    }//GEN-LAST:event_jButton1ActionPerformed


    private void jButton2ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (jTable1.getSelectedRow() < 0) {
            GuiUtils.showErrorMessage("Select row to remove !!");
        } else {
            getConnectionsInfo().remove(jTable1.getSelectedRow());
            configTableModel.fireTableDataChanged();
            if (getConnectionsModel().getDefaultConnectionNum() == jTable1.getRowCount()) {
                getConnectionsModel().setDefaultConnectionNum(0);
                PaineHolder.getMainView().updateSqlClientTitle();
            }
            renewCurrentConnectionLabel();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        configManager.saveConnections();

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        configManager.loadConnections();
        configTableModel.fireTableDataChanged();
        renewCurrentConnectionLabel();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        final int selectedRow = jTable1.getSelectedRow();
        if (selectedRow >= 0) {
            getConnectionsModel().setDefaultConnectionNum(selectedRow);
            PaineHolder.getMainView().updateSqlClientTitle();
        }
        configManager.saveConnections();
        this.dispose();
    }//GEN-LAST:event_jButton6ActionPerformed


    private List<ReconnectionInfo> getConnectionsInfo() {
        return configManager.getConnectionsModel().getConnectionsInfo();
    }

    private ReconnectionInfo getDefaultConnection() {
        return configManager.getConnectionsModel().getDefaultConnection();
    }

    private ConnConfigModel getConnectionsModel() {
        return configManager.getConnectionsModel();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    JButton jButton1;
    JButton jButton2;
    JButton jButton3;
    JButton jButton4;
    JButton jButton5;
    JButton jButton6;
    JLabel jLabel1;
    JLabel jLabel2;
    JScrollPane jScrollPane1;
    JTable jTable1;
    // End of variables declaration//GEN-END:variables
}


